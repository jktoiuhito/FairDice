/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./build/Model/Model.js":
/*!******************************!*\
  !*** ./build/Model/Model.js ***!
  \******************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Model\n/* harmony export */ });\n/* harmony import */ var _jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jktoiuhito/utility */ \"./node_modules/@jktoiuhito/utility/lib/index.js\");\n/* harmony import */ var _Rolls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rolls */ \"./build/Model/Rolls.js\");\n/* harmony import */ var _Roll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Roll */ \"./build/Model/Roll.js\");\n\r\n\r\n\r\n/**\r\n * Object responsible for rolling the dice and keeping track of history.\r\n */\r\nclass Model {\r\n    constructor() {\r\n        /**\r\n         * Register a function to call each time the state of current rolls changes.\r\n         * @param callback Function to call when the current rolls change.\r\n         */\r\n        this.onCurrentRollsChange = (\r\n        // Cannot be readonly type.\r\n        // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n        callback) => {\r\n            this.Listeners.push(\r\n            // Cannot be readonly type.\r\n            // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n            (0,_jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__.Assert)(callback).isFunction.value);\r\n        };\r\n        /**\r\n         * Roll a dice and add it to the current rolls.\r\n         * @param facecount Facecount of the dice.\r\n         */\r\n        this.Roll = (facecount) => {\r\n            this.CurrentRolls.Rolls.push(new _Roll__WEBPACK_IMPORTED_MODULE_2__.default(facecount, Model.RandomNumber(facecount)));\r\n            this.Changed(this.CurrentRolls);\r\n        };\r\n        /**\r\n         * Saves current rolls to the head of history and then resets them.\r\n         */\r\n        this.Reset = () => {\r\n            if (this.CurrentRolls.Rolls.length > 0) {\r\n                const old = this.CurrentRolls;\r\n                const neww = new _Rolls__WEBPACK_IMPORTED_MODULE_1__.default([]);\r\n                old.Next = neww;\r\n                neww.Previous = old;\r\n                Object.freeze(old);\r\n                this.History.push(neww);\r\n                this.CurrentRolls = neww;\r\n            }\r\n            this.Changed(this.CurrentRolls);\r\n        };\r\n        // Cannot be readonly type.\r\n        // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n        this.Changed = (rolls) => {\r\n            this.Listeners.forEach((l) => l(rolls));\r\n        };\r\n        this.Listeners = [];\r\n        this.CurrentRolls = new _Rolls__WEBPACK_IMPORTED_MODULE_1__.default([]);\r\n        this.History = [];\r\n        this.History.push(this.CurrentRolls);\r\n    }\r\n}\r\n/**\r\n * Return a random number between 1 and the given maximum number.\r\n * @param max Maximum number returned.\r\n * @throws max is under one.\r\n */\r\nModel.RandomNumber = (max) => {\r\n    if (max <= 0) {\r\n        throw new Error(\"'max' cannot be under one\");\r\n    }\r\n    else if (max === 1) {\r\n        return 1;\r\n    }\r\n    /**\r\n     * Numbers are easily converted to the given range with modulo-operator.\r\n     * Example with a max of 4:\r\n     * 0 4 8  % max -> 0\r\n     * 1 5 9  % max -> 1\r\n     * 2 6 10 % max -> 2\r\n     * 3 7 11 % max -> 3\r\n     *\r\n     * Maximum value generated is 2^32 (or 2^32 - 1). There is no guaranty\r\n     * that this number is exactly at the border of a \"block\" (its modulo\r\n     * operation with max would produce max - 1) is. Therefore there is a very\r\n     * small chance that some numbers can be generated more frequently than\r\n     * others. To eliminate this possibility, the maximum number should be\r\n     * 2^32 - (2^32 % max) - 1, which % max is always max - 1.\r\n     */\r\n    const array = new Uint32Array(1);\r\n    const maxValue = Math.pow(2, 32) - (Math.pow(2, 32) % max) - 1;\r\n    // ...what else should be used?\r\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition,no-constant-condition\r\n    while (true) {\r\n        window.crypto.getRandomValues(array);\r\n        if (array[0] <= maxValue) {\r\n            break;\r\n        }\r\n    }\r\n    return (array[0] % max) + 1;\r\n};\r\n\n\n//# sourceURL=webpack://fairdice/./build/Model/Model.js?");

/***/ }),

/***/ "./build/Model/Roll.js":
/*!*****************************!*\
  !*** ./build/Model/Roll.js ***!
  \*****************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Roll\n/* harmony export */ });\n/* harmony import */ var _jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jktoiuhito/utility */ \"./node_modules/@jktoiuhito/utility/lib/index.js\");\n\r\n/**\r\n * Data of a single roll of a single dice.\r\n */\r\nclass Roll {\r\n    /**\r\n     * Create a new roll of a single dice.\r\n     * @param facecount How many faces the dice has.\r\n     * @param value What was the rolled value.\r\n     * @throws Dice is under one. Value is under one or over the eye-count of the\r\n     * dice.\r\n     */\r\n    constructor(facecount, value) {\r\n        if ((0,_jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__.Assert)(facecount).isNumber.isNotNaN.isSafeInteger.value < 1) {\r\n            throw new Error(\"'facecount' cannot be under one\");\r\n        }\r\n        else if ((0,_jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__.Assert)(value).isNumber.isNotNaN.isSafeInteger.value < 1) {\r\n            throw new Error(\"'facecount' cannot be under one\");\r\n        }\r\n        else if (value > facecount) {\r\n            throw new Error(\"'value' cannot be greater than 'facecount'\");\r\n        }\r\n        this.Facecount = facecount;\r\n        this.Value = value;\r\n        Object.freeze(this);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./build/Model/Roll.js?");

/***/ }),

/***/ "./build/Model/Rolls.js":
/*!******************************!*\
  !*** ./build/Model/Rolls.js ***!
  \******************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Rolls\n/* harmony export */ });\n/* harmony import */ var _jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jktoiuhito/utility */ \"./node_modules/@jktoiuhito/utility/lib/index.js\");\n\r\n/**\r\n * Collection of multiple Roll-values.\r\n */\r\nclass Rolls {\r\n    constructor(rolls, previous = undefined, next = undefined) {\r\n        this.Rolls = (0,_jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__.Assert)(rolls).isObject.isNotNull.isInstanceOf(Array)\r\n            .value;\r\n        this.Previous = previous;\r\n        this.Next = next;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./build/Model/Rolls.js?");

/***/ }),

/***/ "./build/View/DiceButton.js":
/*!**********************************!*\
  !*** ./build/View/DiceButton.js ***!
  \**********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ DiceButton\n/* harmony export */ });\n/**\r\n * Button representing a single dice.\r\n */\r\nclass DiceButton extends HTMLButtonElement {\r\n    constructor(faces) {\r\n        super();\r\n        this.Facecount = faces;\r\n        this._rollcount = 0;\r\n        // element related\r\n        this.type = \"button\";\r\n        this.className = \"btn btn-primary m-2\";\r\n        this.style.width = \"4em\";\r\n        const facecountElement = document.createElement(\"p\");\r\n        facecountElement.className = \"m-0 p-0\";\r\n        facecountElement.textContent = \"D\" + this.Facecount.toString();\r\n        this._rollcountElement = document.createElement(\"p\");\r\n        this._rollcountElement.className = \"m-0 p-0 badge\";\r\n        this._rollcountElement.textContent = this._rollcount.toString();\r\n        this.append(facecountElement, this._rollcountElement);\r\n    }\r\n    /**\r\n     * Set the amount of times the dice has been rolled.\r\n     */\r\n    set Rollcount(rollcount) {\r\n        if (rollcount < 0) {\r\n            throw new Error(\"'rollcount' cannot be under one\");\r\n        }\r\n        this._rollcount = rollcount;\r\n        // always exists.\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this._rollcountElement.removeChild(this._rollcountElement.firstChild);\r\n        this._rollcountElement.textContent = this._rollcount.toString();\r\n    }\r\n}\r\nDiceButton.ElementName = \"dice-button\";\r\ncustomElements.define(DiceButton.ElementName, DiceButton, {\r\n    extends: \"button\",\r\n});\r\n\n\n//# sourceURL=webpack://fairdice/./build/View/DiceButton.js?");

/***/ }),

/***/ "./build/View/View.js":
/*!****************************!*\
  !*** ./build/View/View.js ***!
  \****************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ View\n/* harmony export */ });\n/* harmony import */ var _jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jktoiuhito/utility */ \"./node_modules/@jktoiuhito/utility/lib/index.js\");\n/* harmony import */ var _DiceButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DiceButton */ \"./build/View/DiceButton.js\");\n/* harmony import */ var _Model_Rolls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Model/Rolls */ \"./build/Model/Rolls.js\");\n\r\n\r\n\r\n/**\r\n * Object responsible for managing the DOM.\r\n */\r\nclass View {\r\n    // object cannot be marked with the 'readonly' type modifier.\r\n    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n    constructor(model) {\r\n        // Cannot be readonly.\r\n        // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n        this.DisplayCurrentRolls = (current) => {\r\n            // Assign as current rolls\r\n            this.CurrentRolls = current;\r\n            // Clear previous results\r\n            while (this.ResultsContainer.firstChild !== null) {\r\n                this.ResultsContainer.removeChild(this.ResultsContainer.firstChild);\r\n            }\r\n            // Print current rolls and their score\r\n            let score = 0;\r\n            current.Rolls.forEach((r) => {\r\n                score += r.Value;\r\n                // Create base element\r\n                const card = document.createElement(\"div\");\r\n                card.className = \"card m-1\";\r\n                card.style.width = \"4em\";\r\n                card.style.height = \"4em\";\r\n                // Dice name\r\n                const dice = document.createElement(\"h5\");\r\n                dice.className = \"badge text-muted\";\r\n                dice.textContent = \"d\" + r.Facecount.toString();\r\n                card.appendChild(dice);\r\n                // Rolled value\r\n                const roll = document.createElement(\"span\");\r\n                roll.textContent = r.Value.toString();\r\n                card.appendChild(roll);\r\n                // Add element to page\r\n                this.ResultsContainer.appendChild(card);\r\n            });\r\n            // is never null.\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.ScoreCounter.removeChild(this.ScoreCounter.firstChild);\r\n            this.ScoreCounter.textContent = score.toString();\r\n            // Update dice-buttons counters\r\n            this.Dice.forEach(\r\n            // cannot be a readonly type.\r\n            // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n            (d) => (d.Rollcount = this.CurrentRolls.Rolls.filter((r) => r.Facecount === d.Facecount).length));\r\n            // Toggle button state\r\n            this.NewRollButton.disabled = current.Rolls.length <= 0;\r\n            this.PreviousButton.disabled = current.Previous === undefined;\r\n            this.NextButton.disabled = current.Next === undefined;\r\n        };\r\n        this.GetElementById = (id) => {\r\n            return (0,_jktoiuhito_utility__WEBPACK_IMPORTED_MODULE_0__.Assert)(document.getElementById(id), id).isObject.isNotNull.isInstanceOf(HTMLElement).value;\r\n        };\r\n        this.CreateBenchmarkWorker = () => {\r\n            function benchmark() {\r\n                // TODO: benchmark function implementation\r\n                throw new Error(\"not implemented\");\r\n            }\r\n            //https://gist.github.com/SunboX/5849664\r\n            let code = benchmark.toString();\r\n            code = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\r\n            const blob = new Blob([code], { type: \"application/javascript\" });\r\n            const worker = new Worker(URL.createObjectURL(blob));\r\n            // Cannot be readonly type.\r\n            // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n            worker.onerror = (e) => console.error(e);\r\n            worker.onmessage = () => \"not implemented\";\r\n            return worker;\r\n        };\r\n        // Get references to UI elements\r\n        this.DiceContainer = this.GetElementById(\"dice-container\" /* DiceContainer */);\r\n        this.ResultsContainer = this.GetElementById(\"results-container\" /* ResultsContainer */);\r\n        this.ScoreCounter = this.GetElementById(\"results-score-counter\" /* ResultsScoreCounter */);\r\n        const ControlsContainer = this.GetElementById(\"controls-container\" /* ControlsContainer */);\r\n        this.PreviousButton = this.GetElementById(\"controls-button-previous\" /* ControlsPreviousButton */);\r\n        this.NextButton = this.GetElementById(\"controls-button-next\" /* ControlsNextButton */);\r\n        this.NewRollButton = this.GetElementById(\"controls-button-new\" /* ControlsNewThrowButton */);\r\n        const BenchmarkButton = this.GetElementById(\"button-benchmark\" /* BenchmarkButton */);\r\n        const BenchmarkModal = this.GetElementById(\"benchmark-modal\" /* BenchmarkModal */);\r\n        const BenchmarkRunButton = this.GetElementById(\"benchmark-run-button\" /* BenchmarkRunButton */);\r\n        const BenchmarkStopButton = this.GetElementById(\"benchmark-stop-button\" /* BenchmarkStopButton */);\r\n        const BenchmarkIntro = this.GetElementById(\"benchmark-modal-intro\" /* BenchmarkModalIntro */);\r\n        const BenchmarkTest = this.GetElementById(\"benchmark-modal-test\" /* BenchmarkModalTest */);\r\n        // Create dice\r\n        this.Dice = [];\r\n        View.Dice.forEach((d) => {\r\n            const diceButton = new _DiceButton__WEBPACK_IMPORTED_MODULE_1__.default(d);\r\n            diceButton.addEventListener(\"click\", () => {\r\n                model.Roll(d);\r\n            });\r\n            this.DiceContainer.appendChild(diceButton);\r\n            this.Dice.push(diceButton);\r\n        });\r\n        // Register model event listener\r\n        model.onCurrentRollsChange(this.DisplayCurrentRolls);\r\n        // Add event listeners to buttons\r\n        this.PreviousButton.addEventListener(\"click\", () => {\r\n            // Only callable if previous rolls exist.\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.DisplayCurrentRolls(this.CurrentRolls.Previous);\r\n        });\r\n        this.NextButton.addEventListener(\"click\", () => {\r\n            // Only callable if next rolls exist.\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.DisplayCurrentRolls(this.CurrentRolls.Next);\r\n        });\r\n        this.NewRollButton.addEventListener(\"click\", () => {\r\n            model.Reset();\r\n        });\r\n        // Cannot be readonly type.\r\n        // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n        BenchmarkRunButton.addEventListener(\"click\", () => {\r\n            // start benchmark\r\n            this.BenchmarkWorker = this.CreateBenchmarkWorker();\r\n            this.BenchmarkTimerId = window.setInterval(() => {\r\n                // TODO: update DOM with the result.\r\n                // Just assigned above...\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                this.BenchmarkWorker.postMessage(null);\r\n                throw new Error(\"not implemented\");\r\n            }, 250);\r\n            // toggle buttons, display benchmark\r\n            BenchmarkIntro.hidden = BenchmarkRunButton.hidden = true;\r\n            BenchmarkTest.hidden = BenchmarkStopButton.hidden = false;\r\n        });\r\n        BenchmarkStopButton.addEventListener(\"click\", () => {\r\n            var _a;\r\n            // terminate and reset worker, reset timer\r\n            window.clearInterval(this.BenchmarkTimerId);\r\n            (_a = this.BenchmarkWorker) === null || _a === void 0 ? void 0 : _a.terminate();\r\n            this.BenchmarkTimerId = 0;\r\n            this.BenchmarkWorker = undefined;\r\n            // clean up results from DOM\r\n            while (BenchmarkTest.firstChild !== null) {\r\n                BenchmarkTest.removeChild(BenchmarkTest.firstChild);\r\n            }\r\n            // toggle buttons, display info\r\n            BenchmarkIntro.hidden = BenchmarkRunButton.hidden = false;\r\n            BenchmarkTest.hidden = BenchmarkStopButton.hidden = true;\r\n        });\r\n        // Assign CurrentRolls (properly assigned on first model update)\r\n        this.CurrentRolls = new _Model_Rolls__WEBPACK_IMPORTED_MODULE_2__.default([]);\r\n        // No benchmark is running at start, so worker and timer are undefined\r\n        this.BenchmarkWorker = undefined;\r\n        this.BenchmarkTimerId = undefined;\r\n        // Initialize display\r\n        this.DisplayCurrentRolls(this.CurrentRolls);\r\n        // Display hidden elements\r\n        this.DiceContainer.hidden = false;\r\n        this.ResultsContainer.hidden = false;\r\n        ControlsContainer.hidden = false;\r\n        BenchmarkButton.hidden = false;\r\n        this.ScoreCounter.hidden = false;\r\n        BenchmarkModal.hidden = false;\r\n        // is never null.\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        document.querySelector(\"hr\").hidden = false;\r\n    }\r\n}\r\nView.Dice = [4, 6, 8, 10, 12, 20, 100];\r\n\n\n//# sourceURL=webpack://fairdice/./build/View/View.js?");

/***/ }),

/***/ "./build/index.js":
/*!************************!*\
  !*** ./build/index.js ***!
  \************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Model_Model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Model/Model */ \"./build/Model/Model.js\");\n/* harmony import */ var _View_View__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./View/View */ \"./build/View/View.js\");\n\r\n\r\n/**\r\n * Start the app when windows has loaded.\r\n */\r\nwindow.addEventListener(\"load\", () => {\r\n    try {\r\n        new _View_View__WEBPACK_IMPORTED_MODULE_1__.default(new _Model_Model__WEBPACK_IMPORTED_MODULE_0__.default());\r\n    }\r\n    catch (error) {\r\n        // is never null.\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        document.getElementById(\"apple-error\" /* AppleError */).hidden = false;\r\n        throw error;\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://fairdice/./build/index.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/Assert.js":
/*!***************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/Assert.js ***!
  \***************************************************************/
/*! namespace exports */
/*! export Assert [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Assert\": () => /* binding */ Assert\n/* harmony export */ });\n/* harmony import */ var _UnknownAsserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UnknownAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/UnknownAsserter.js\");\n\r\n/**\r\n * Create an assertation from a value.\r\n * @param value Value to create the assertation from.\r\n * @param name Name of the values local variable, parameter name etc.\r\n * @throws Name is not string or undefined. Name is string but is empty or\r\n * consists only of whitespace.\r\n * @returns An asserter for performing assertions against any value.\r\n */\r\nconst Assert = (value, name = undefined) => new _UnknownAsserter__WEBPACK_IMPORTED_MODULE_0__.UnknownAsserter(value, name);\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/Assert.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js ***!
  \*****************************************************************/
/*! namespace exports */
/*! export Asserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Asserter\": () => /* binding */ Asserter\n/* harmony export */ });\n/**\r\n * Base class for performing assertions on a value.\r\n */\r\nclass Asserter {\r\n    /**\r\n     * Create a new Asserter. Validity checking of the value must be performed\r\n     * by the extending class before calling super.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Name is null, not string, is empty or consists only of whitespace.\r\n     */\r\n    constructor(value, name = undefined) {\r\n        if (!(name === undefined || typeof name === \"string\")) {\r\n            throw new Error(\"Name must be of type string or undefined\");\r\n        }\r\n        if (typeof name === \"string\") {\r\n            if (name === \"\") {\r\n                throw new Error(\"Name cannot be empty\");\r\n            }\r\n            else if (name.trim() === \"\") {\r\n                throw new Error(\"Name cannot consist only of whitespace\");\r\n            }\r\n        }\r\n        this._value = value;\r\n        this._name = name === null || name === void 0 ? void 0 : name.trim();\r\n    }\r\n    /**\r\n     * Get the value of the Asserter.\r\n     */\r\n    get value() {\r\n        return this._value;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/BigIntAsserter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/BigIntAsserter.js ***!
  \***********************************************************************/
/*! namespace exports */
/*! export BigIntAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BigIntAsserter\": () => /* binding */ BigIntAsserter\n/* harmony export */ });\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n\r\n/**\r\n * Asserter containing a bigint.\r\n */\r\nclass BigIntAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_0__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing a bigint.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not a bigint. Name is null, not string, is empty or\r\n     * consists only of whitespace.\r\n     */\r\n    constructor(value, name) {\r\n        super(value, name);\r\n        /**\r\n         * Assert that the bigint is greater than another bigint.\r\n         * @param number Bigint to assert value againts.\r\n         * @returns Itself.\r\n         * @throws Argument is not a bigint. The bigint is not greater than the\r\n         * argument bigint.\r\n         */\r\n        this.isGreaterThan = (number) => {\r\n            if (typeof number !== \"bigint\") {\r\n                throw new Error(\"Argument must be of type bigint\");\r\n            }\r\n            if (!(number < this._value)) {\r\n                throw new Error(this._name !== undefined\r\n                    ? // codefactor false positives\r\n                        // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `'${this._name}' is not greater than '${number.toString()}'`\r\n                    : // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `bigint is not greater than '${number.toString()}'`);\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Assert that the bigint is less than another bigint.\r\n         * @param number Bigint to assert value againts.\r\n         * @returns Itself.\r\n         * @throws Argument is not a bigint. The bigint is not less than the\r\n         * argument bigint.\r\n         */\r\n        this.isLessThan = (number) => {\r\n            if (typeof number !== \"bigint\") {\r\n                throw new Error(\"Argument must be of type bigint\");\r\n            }\r\n            if (!(this._value < number)) {\r\n                throw new Error(this._name !== undefined\r\n                    ? // codefactor false positives\r\n                        // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `'${this._name}' is not less than '${number.toString()}'`\r\n                    : // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `bigint is not less than '${number.toString()}'`);\r\n            }\r\n            return this;\r\n        };\r\n        if (typeof value !== \"bigint\") {\r\n            throw new Error(\"Value must be of type bigint\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/BigIntAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/BooleanAsserter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/BooleanAsserter.js ***!
  \************************************************************************/
/*! namespace exports */
/*! export BooleanAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BooleanAsserter\": () => /* binding */ BooleanAsserter\n/* harmony export */ });\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n\r\n/**\r\n * Asserter containing a boolean.\r\n */\r\nclass BooleanAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_0__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing a boolean.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not a boolean. Name is null, not string, is empty or\r\n     * consists only of whitespace.\r\n     */\r\n    constructor(value, name) {\r\n        super(value, name);\r\n        /**\r\n         * Assert that the boolean has the same value as another boolean.\r\n         * @param boolean Boolean to compare value against.\r\n         * @returns Itself.\r\n         * @throws The argument value is not boolean. Boolean and argument boolean\r\n         * are not equal.\r\n         */\r\n        this.isEqual = (boolean) => {\r\n            if (typeof boolean !== \"boolean\") {\r\n                throw new Error(\"Argument must be of type boolean\");\r\n            }\r\n            else if (this._value !== boolean) {\r\n                throw new Error(this._name !== undefined\r\n                    ? `'${this._name}' is not '${boolean.toString()}'`\r\n                    : `boolean is not '${boolean.toString()}'`);\r\n            }\r\n            return this;\r\n        };\r\n        if (typeof value !== \"boolean\") {\r\n            throw new Error(\"Value must be of type boolean\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Assert that the boolean is true.\r\n     * @returns An asserter containing the boolean value 'true'.\r\n     * @throws The boolean is not true.\r\n     */\r\n    get isTrue() {\r\n        if (!this._value) {\r\n            throw new Error(this._name !== undefined\r\n                ? `'${this._name}' is not true`\r\n                : \"boolean is not true\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Assert that the boolean is false.\r\n     * @returns An asserter containing the boolean value 'false'.\r\n     * @throws The boolean is not false.\r\n     */\r\n    get isFalse() {\r\n        if (this._value) {\r\n            throw new Error(this._name !== undefined\r\n                ? `'${this._name}' is not false`\r\n                : \"boolean is not false\");\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/BooleanAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/FunctionAsserter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/FunctionAsserter.js ***!
  \*************************************************************************/
/*! namespace exports */
/*! export FunctionAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FunctionAsserter\": () => /* binding */ FunctionAsserter\n/* harmony export */ });\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n\r\n/**\r\n * Asserter containing a function.\r\n */\r\n// The function is only stored, never called, so type safety of its signature is\r\n// not important.\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nclass FunctionAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_0__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing a function.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not a function. Name is null, not string, is empty or\r\n     * consists only of whitespace.\r\n     */\r\n    // ban-types: reasoning is same as above.\r\n    // prefer-readonly-parameter-types: Function type cannot have the readonly\r\n    // modifier.\r\n    // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/prefer-readonly-parameter-types\r\n    constructor(value, name) {\r\n        super(value, name);\r\n        if (typeof value !== \"function\") {\r\n            throw new Error(\"Value must be of type function\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/FunctionAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/NonNullObjectAsserter.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/NonNullObjectAsserter.js ***!
  \******************************************************************************/
/*! namespace exports */
/*! export NonNullObjectAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NonNullObjectAsserter\": () => /* binding */ NonNullObjectAsserter\n/* harmony export */ });\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n// We only store the object, it doesn't matter whether its currently hard to use\r\n// or not.\r\n/* eslint-disable @typescript-eslint/ban-types */\r\n\r\n/**\r\n * Asserter containing an object.\r\n */\r\nclass NonNullObjectAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_0__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing an object.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not an object or is null. Name is null, not string, is\r\n     * empty or consists only of whitespace.\r\n     */\r\n    constructor(value, name) {\r\n        super(value, name);\r\n        /**\r\n         * Assert that the object is an instance of a specific type.\r\n         * @param type Type (= a constructor function) to assert against.\r\n         * @returns Itself.\r\n         * @throws Type is not a function. The object is not an instance of the given\r\n         * type.\r\n         * @see This article from Ran Lottem helped A LOT in creating this method:\r\n         *  https://dev.to/krumpet/generic-type-guard-in-typescript-258l\r\n         */\r\n        this.isInstanceOf = (type) => {\r\n            if (typeof type !== \"function\") {\r\n                throw new Error(\"Type must be of type function\");\r\n            }\r\n            else if (type.prototype === undefined) {\r\n                throw new Error(\"Type must have a defined prototype\");\r\n            }\r\n            else if (!(this._value instanceof type)) {\r\n                throw new Error(`Object is not an instance of '${type.name}'`);\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Assert that an object is referentially equal to another object.\r\n         * @param object Object to assert referential equality againts.\r\n         * @returns Itself.\r\n         * @throws Argument is not an object or is null. The object is not\r\n         * referentially equal to the argument object.\r\n         */\r\n        this.is = (object) => {\r\n            if (typeof object !== \"object\") {\r\n                throw new Error(\"Argument must be of type object\");\r\n                // typeof null === \"object\"\r\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n            }\r\n            else if (object === null) {\r\n                throw new Error(\"Argument cannot be null\");\r\n            }\r\n            else if (this._value !== object) {\r\n                throw new Error(this._name !== undefined\r\n                    ? `'${this._name}' is not referentially equal to the given object`\r\n                    : \"object is not referentially equal to the given object\");\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Assert that an object is not referentially equal to another object.\r\n         * @param object Object to assert referential equality againts.\r\n         * @returns Itself.\r\n         * @throws Argument is not an object or is null. The object is referentially\r\n         * equal to the argument object.\r\n         */\r\n        this.isNot = (object) => {\r\n            if (typeof object !== \"object\") {\r\n                throw new Error(\"Argument must be of type object\");\r\n                // typeof null === \"object\"\r\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n            }\r\n            else if (object === null) {\r\n                throw new Error(\"Argument cannot be null\");\r\n            }\r\n            else if (this._value === object) {\r\n                throw new Error(this._name !== undefined\r\n                    ? `'${this._name}' is referentially equal to the given object`\r\n                    : \"object is referentially equal to the given object\");\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Assert that the object passes the predicate.\r\n         * @param predicate Predicate function to check the object with.\r\n         * @returns Itself.\r\n         * @throws The argument is not a function. The argument function does not\r\n         * expect exactly one parameter, returns a non-boolean value or throws an\r\n         * error during execution. The object does not match the predicate.\r\n         */\r\n        this.isMatch = (predicate) => {\r\n            if (typeof predicate !== \"function\") {\r\n                throw new Error(\"Predicate must be of type function\");\r\n            }\r\n            else if (predicate.length !== 1) {\r\n                throw new Error(\"Predicate must expect exactly one parameter\");\r\n            }\r\n            const ret = predicate(this._value);\r\n            if (typeof ret !== \"boolean\") {\r\n                throw new Error(\"Predicate must return a value of type boolean\");\r\n            }\r\n            else if (!ret) {\r\n                throw new Error(this._name !== undefined\r\n                    ? `'${this._name}' does not match the predicate`\r\n                    : \"object does not match the predicate\");\r\n            }\r\n            return this;\r\n        };\r\n        if (typeof value !== \"object\") {\r\n            throw new Error(\"Value must be of type object\");\r\n            // typeof null === \"object\"\r\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n        }\r\n        else if (value === null) {\r\n            throw new Error(\"Value cannot be null\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/NonNullObjectAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/NumberAsserter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/NumberAsserter.js ***!
  \***********************************************************************/
/*! namespace exports */
/*! export NumberAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NumberAsserter\": () => /* binding */ NumberAsserter\n/* harmony export */ });\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n\r\n/**\r\n * Asserter containing a symbol.\r\n */\r\nclass NumberAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_0__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing a number.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not a number. Name is null, not string, is empty or\r\n     * consists only of whitespace.\r\n     */\r\n    constructor(value, name) {\r\n        super(value, name);\r\n        /**\r\n         * Assert that the number is greater than another number.\r\n         * @param number Number to assert value againts.\r\n         * @returns Itself.\r\n         * @throws Argument is not a number. The number is not greater than the\r\n         * argument number.\r\n         */\r\n        this.isGreaterThan = (number) => {\r\n            if (typeof number !== \"number\") {\r\n                throw new Error(\"Argument must be of type number\");\r\n            }\r\n            if (!(number < this._value)) {\r\n                throw new Error(this._name !== undefined\r\n                    ? // codefactor false positives\r\n                        // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `'${this._name}' is not greater than '${number.toString()}'`\r\n                    : // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `number is not greater than '${number.toString()}'`);\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Assert that the number is less than another number.\r\n         * @param number Number to assert value againts.\r\n         * @returns Itself.\r\n         * @throws Argument is not a number. The number is not less than the\r\n         * argument number.\r\n         */\r\n        this.isLessThan = (number) => {\r\n            if (typeof number !== \"number\") {\r\n                throw new Error(\"Argument must be of type number\");\r\n            }\r\n            if (!(this._value < number)) {\r\n                throw new Error(this._name !== undefined\r\n                    ? // codefactor false positives\r\n                        // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `'${this._name}' is not less than '${number.toString()}'`\r\n                    : // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n                        `number is not less than '${number.toString()}'`);\r\n            }\r\n            return this;\r\n        };\r\n        if (typeof value !== \"number\") {\r\n            throw new Error(\"Value must be of type number\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Assert that the number is a safe integer.\r\n     * @returns Itself.\r\n     * @throws The number is not a safe integer.\r\n     */\r\n    get isSafeInteger() {\r\n        if (!Number.isSafeInteger(this._value)) {\r\n            throw new Error(this._name !== undefined\r\n                ? `'${this._name}' is not a safe integer`\r\n                : \"number is not a safe integer\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Assert that the number is NaN.\r\n     * @returns Asserter containing the NaN value.\r\n     * @throws The number is not NaN.\r\n     */\r\n    get isNaN() {\r\n        if (!Number.isNaN(this._value)) {\r\n            throw new Error(this._name !== undefined\r\n                ? `'${this._name}' is not NaN`\r\n                : \"number is not NaN\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Assert that the number is not NaN.\r\n     * @returns Itself.\r\n     * @throws The number is NaN.\r\n     */\r\n    get isNotNaN() {\r\n        if (Number.isNaN(this._value)) {\r\n            throw new Error(this._name !== undefined\r\n                ? `'${this._name}' is NaN`\r\n                : \"number is NaN\");\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/NumberAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/ObjectAsserter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/ObjectAsserter.js ***!
  \***********************************************************************/
/*! namespace exports */
/*! export ObjectAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ObjectAsserter\": () => /* binding */ ObjectAsserter\n/* harmony export */ });\n/* harmony import */ var _NonNullObjectAsserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NonNullObjectAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/NonNullObjectAsserter.js\");\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n// We only store the object, it doesn't matter whether its currently hard to use\r\n// or not.\r\n/* eslint-disable @typescript-eslint/ban-types */\r\n\r\n\r\n/**\r\n * Asserter containing an object which can ben null.\r\n */\r\nclass ObjectAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_1__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing an object which can be null.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not an object. Name is null, not string, is\r\n     * empty or consists only of whitespace.\r\n     */\r\n    constructor(value, name) {\r\n        super(value, name);\r\n        if (typeof value !== \"object\") {\r\n            throw new Error(\"Value must be of type object\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Assert that the object is null.\r\n     * @returns Asserter containing the null value.\r\n     * @throws Object is not null.\r\n     */\r\n    get isNull() {\r\n        if (this._value !== null) {\r\n            throw new Error(this._name !== undefined\r\n                ? `'${this._name}' is not null`\r\n                : \"Value is not null\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Assert that the object is not null.\r\n     * @returns Itself.\r\n     * @throws Object is null.\r\n     */\r\n    get isNotNull() {\r\n        if (this._value === null) {\r\n            throw new Error(this._name !== undefined\r\n                ? `'${this._name}' is null`\r\n                : \"Value is null\");\r\n        }\r\n        return new _NonNullObjectAsserter__WEBPACK_IMPORTED_MODULE_0__.NonNullObjectAsserter(this._value, this._name);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/ObjectAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/StringAsserter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/StringAsserter.js ***!
  \***********************************************************************/
/*! namespace exports */
/*! export StringAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StringAsserter\": () => /* binding */ StringAsserter\n/* harmony export */ });\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n\r\n/**\r\n * Asserter containing a string.\r\n */\r\nclass StringAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_0__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing a string.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not a string. Name is null, not string, is empty or\r\n     * consists only of whitespace.\r\n     */\r\n    constructor(value, name = undefined) {\r\n        super(value, name);\r\n        /**\r\n         * Assert that the string is matched by a regular expression.\r\n         * @param pattern Regular expression to match the string with.\r\n         * @returns Itself.\r\n         * @throws The argument is not a regular expression. The string does not\r\n         * match the regular expression.\r\n         */\r\n        // readonly type modifier is not permitted on type RegExp.\r\n        // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n        this.isMatch = (pattern) => {\r\n            if (typeof pattern !== \"object\" || !(pattern instanceof RegExp)) {\r\n                throw new Error(\"Argument must be of type RegExp\");\r\n            }\r\n            else if (!pattern.test(this._value)) {\r\n                throw new Error(this._name !== undefined\r\n                    ? `'${this._name}' does not match the regular expression ${pattern.toString()}`\r\n                    : `string does not match the regular expression ${pattern.toString()}`);\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Assert that the string is not matched by a regular expression.\r\n         * @param pattern Regular expression to match the string with.\r\n         * @returns Itself.\r\n         * @throws The argument is not a regular expression. The string matched the\r\n         * regular expression.\r\n         */\r\n        // readonly type modifier is not permitted on type RegExp.\r\n        // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n        this.isNotMatch = (pattern) => {\r\n            if (typeof pattern !== \"object\" || !(pattern instanceof RegExp)) {\r\n                throw new Error(\"Argument must be of type RegExp\");\r\n            }\r\n            else if (pattern.test(this._value)) {\r\n                throw new Error(this._name !== undefined\r\n                    ? `'${this._name}' matches the regular expression ${pattern.toString()}`\r\n                    : `string matches the regular expression ${pattern.toString()}`);\r\n            }\r\n            return this;\r\n        };\r\n        if (typeof value !== \"string\") {\r\n            throw new Error(\"Value must be of type string\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Assert that the string is not empty.\r\n     * @throws The string is empty.\r\n     * @returns Itself.\r\n     */\r\n    get isNotEmpty() {\r\n        if (this._value === \"\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `String '${this._name}' is empty`\r\n                : \"String is empty\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Assert that the string is empty.\r\n     * @returns An asserter containing an empty string.\r\n     * @throws The string is not empty.\r\n     */\r\n    get isEmpty() {\r\n        if (this._value !== \"\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `String '${this._name}' is not empty`\r\n                : \"String is not empty\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Assert that the string does not only consist of whitespace.\r\n     * @returns Itself.\r\n     * @throws The string consists only of whitespace.\r\n     */\r\n    get isNotWhitespace() {\r\n        if (this._value.length > 0 && this._value.trim() === \"\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `String '${this._name}' consists only of whitespace`\r\n                : \"String consists only of whitespace\");\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/StringAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/SymbolAsserter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/SymbolAsserter.js ***!
  \***********************************************************************/
/*! namespace exports */
/*! export SymbolAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SymbolAsserter\": () => /* binding */ SymbolAsserter\n/* harmony export */ });\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n\r\n/**\r\n * Asserter containing a symbol.\r\n */\r\nclass SymbolAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_0__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing a symbol.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Value is not a symbol. Name is null, not string, is empty or\r\n     * consists only of whitespace.\r\n     */\r\n    constructor(value, name) {\r\n        super(value, name);\r\n        if (typeof value !== \"symbol\") {\r\n            throw new Error(\"Value must be of type symbol\");\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/SymbolAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/UnknownAsserter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/UnknownAsserter.js ***!
  \************************************************************************/
/*! namespace exports */
/*! export UnknownAsserter [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UnknownAsserter\": () => /* binding */ UnknownAsserter\n/* harmony export */ });\n/* harmony import */ var _FunctionAsserter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FunctionAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/FunctionAsserter.js\");\n/* harmony import */ var _BooleanAsserter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BooleanAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/BooleanAsserter.js\");\n/* harmony import */ var _NumberAsserter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NumberAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/NumberAsserter.js\");\n/* harmony import */ var _StringAsserter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StringAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/StringAsserter.js\");\n/* harmony import */ var _SymbolAsserter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SymbolAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/SymbolAsserter.js\");\n/* harmony import */ var _ObjectAsserter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ObjectAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/ObjectAsserter.js\");\n/* harmony import */ var _BigIntAsserter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BigIntAsserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/BigIntAsserter.js\");\n/* harmony import */ var _Asserter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Asserter */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Asserter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Asserter containing any value except null.\r\n */\r\nclass UnknownAsserter extends _Asserter__WEBPACK_IMPORTED_MODULE_7__.Asserter {\r\n    /**\r\n     * Create a new Asserter containing any value except null or undefined.\r\n     * @param value Value to perform assertations on.\r\n     * @param name Name of the values local variable, parameter name etc.\r\n     * @throws Name is null, not string, is empty or\r\n     * consists only of whitespace.\r\n     */\r\n    constructor(value, name = undefined) {\r\n        super(value, name);\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Assert that the value is a bigint.\r\n     * @returns An asserter for performing assertions against bigints.\r\n     * @throws The value is not a bigint.\r\n     */\r\n    get isBigint() {\r\n        if (typeof this._value !== \"bigint\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not a bigint`\r\n                : \"Value is not a bigint\");\r\n        }\r\n        return new _BigIntAsserter__WEBPACK_IMPORTED_MODULE_6__.BigIntAsserter(this._value, this._name);\r\n    }\r\n    /**\r\n     * Assert that the value is a boolean.\r\n     * @returns An asserter for performing assertions against booleans.\r\n     * @throws The value is not a boolean.\r\n     */\r\n    get isBoolean() {\r\n        if (typeof this._value !== \"boolean\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not a boolean`\r\n                : \"Value is not a boolean\");\r\n        }\r\n        return new _BooleanAsserter__WEBPACK_IMPORTED_MODULE_1__.BooleanAsserter(this._value, this._name);\r\n    }\r\n    /**\r\n     * Assert that the value is a function.\r\n     * @returns An asserter for performing assertions against functions.\r\n     * @throws The value is not a function.\r\n     */\r\n    get isFunction() {\r\n        if (typeof this._value !== \"function\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not a function`\r\n                : \"Value is not a function\");\r\n        }\r\n        return new _FunctionAsserter__WEBPACK_IMPORTED_MODULE_0__.FunctionAsserter(this._value, this._name);\r\n    }\r\n    /**\r\n     * Assert that the value is a number.\r\n     * @returns An asserter for performing assertions against numbers.\r\n     * @throws The value is not a number.\r\n     */\r\n    get isNumber() {\r\n        if (typeof this._value !== \"number\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not a number`\r\n                : \"Value is not a number\");\r\n        }\r\n        return new _NumberAsserter__WEBPACK_IMPORTED_MODULE_2__.NumberAsserter(this._value, this._name);\r\n    }\r\n    /**\r\n     * Assert that the value is an object.\r\n     * @returns An asserter for performing assertions against objects.\r\n     * @throws The value is not an object.\r\n     */\r\n    get isObject() {\r\n        if (typeof this._value !== \"object\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not an object`\r\n                : \"Value is not an object\");\r\n        }\r\n        return new _ObjectAsserter__WEBPACK_IMPORTED_MODULE_5__.ObjectAsserter(this._value, this._name);\r\n    }\r\n    /**\r\n     * Assert that the value is a string.\r\n     * @returns An asserter for performing assertions against strings.\r\n     * @throws The value is not a string.\r\n     */\r\n    get isString() {\r\n        if (typeof this._value !== \"string\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not a string`\r\n                : \"Value is not a string\");\r\n        }\r\n        return new _StringAsserter__WEBPACK_IMPORTED_MODULE_3__.StringAsserter(this._value, this._name);\r\n    }\r\n    /**\r\n     * Assert that the value is a Symbol.\r\n     * @returns An asserter for performing assertions against symbols.\r\n     * @throws The value is not a symbol.\r\n     */\r\n    get isSymbol() {\r\n        if (typeof this._value !== \"symbol\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not a symbol`\r\n                : \"Value is not a symbol\");\r\n        }\r\n        return new _SymbolAsserter__WEBPACK_IMPORTED_MODULE_4__.SymbolAsserter(this._value, this._name);\r\n    }\r\n    /**\r\n     * Assert that the value is undefined.\r\n     * @returns Asserter containing the undefined value.\r\n     * @throws The value is not undefined.\r\n     */\r\n    get isUndefined() {\r\n        if (typeof this._value !== \"undefined\") {\r\n            throw new Error(this._name !== undefined\r\n                ? `Value of '${this._name}' is not undefined`\r\n                : \"Value is not undefined\");\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/UnknownAsserter.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/Assert/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/Assert/index.js ***!
  \**************************************************************/
/*! namespace exports */
/*! export Assert [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@jktoiuhito/utility/lib/Assert/Assert.js .Assert */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Assert\": () => /* reexport safe */ _Assert__WEBPACK_IMPORTED_MODULE_0__.Assert\n/* harmony export */ });\n/* harmony import */ var _Assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assert */ \"./node_modules/@jktoiuhito/utility/lib/Assert/Assert.js\");\n\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/Assert/index.js?");

/***/ }),

/***/ "./node_modules/@jktoiuhito/utility/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jktoiuhito/utility/lib/index.js ***!
  \*******************************************************/
/*! namespace exports */
/*! export Assert [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@jktoiuhito/utility/lib/Assert/Assert.js .Assert */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Assert\": () => /* reexport safe */ _Assert__WEBPACK_IMPORTED_MODULE_0__.Assert\n/* harmony export */ });\n/* harmony import */ var _Assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assert */ \"./node_modules/@jktoiuhito/utility/lib/Assert/index.js\");\n/**\r\n * Export everything meant to be exported.\r\n */\r\n\r\n// remember to edit package.json if uncommenting this.\r\n//export { IObservable, ObservableList } from \"./Observable\";\r\n\n\n//# sourceURL=webpack://fairdice/./node_modules/@jktoiuhito/utility/lib/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./build/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;